{"version":3,"sources":["logo.svg","Button.js","App.js","ValueBlock.js","OperationBlock.js","Number.js","NumberBlock.js","serviceWorker.js","index.js"],"names":["module","exports","Button","buttonClick","props","ChangeOperationsInput","buttonname","render","className","onClick","React","Component","App","state","counter","operation","onChangedNumberInput","newcounter","toString","slice","number","setState","onChangeOperationsInput","substring","length","blockoperations","includes","eval","ChangedInput","ValueBlock","OperationBlock","opertaionElements","map","o","Number","SetValue","value","class","NumberBlock","numberElements","nb","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d44e122.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Button extends React.Component {\r\n\r\n    buttonClick = () => {\r\n        this.props.ChangeOperationsInput(this.props.buttonname)\r\n    }\r\n\r\n\r\n    render = () => {\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"button l\" onClick={this.buttonClick}>\r\n                {this.props.buttonname}\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ValueBlock from \"./ValueBlock\";\nimport NumberBlock from \"./NumberBlock\";\nimport OperationBlock from \"./OperationBlock\";\n\nclass App extends React.Component {\n\n    state = {\n        counter: '',\n        operation: ''\n\n    }\n    onChangedNumberInput = (newcounter) => {\n        // let string=`${this.state.string}`\n        if (this.state.counter.toString().slice(0) != '0') {\n\n\n            let number = this.state.counter + `${newcounter}`\n            this.setState({\n                counter: number\n            })\n        }\n    }\n    onChangeOperationsInput = (operation) => {\n//debugger;\n//console.dir(this.state.counter)\n        if (operation === \"C\") {\n            this.setState({\n                counter: '',\n            })\n        } else if (operation === \"<\") {\n            //  let newcounter2 = `${this.state.counter}`\n            let counter = this.state.counter.toString()\n            let newcounter = counter.substring(0, counter.length - 1)\n\n            this.setState({\n                counter: newcounter\n            })\n        } else if (operation === \"=\") {\n            let blockoperations = [\"/\", \"*\", \"-\", \"+\"]\n            //let counter = `${this.state.counter}`\n\n            if (!blockoperations.includes(this.state.counter.toString().slice(-1))) {\n                let newcounter = eval(this.state.counter)\n                this.setState({\n                    counter: newcounter\n                })\n            }\n        } else {\n            let blockoperations = [\"/\", \"*\", \"-\", \"+\"]\n\n            if (!blockoperations.includes(this.state.counter.toString().slice(-1))) {\n\n                let counter = this.state.counter + `${operation}`\n                this.setState({\n                    counter: counter,\n                    operation: counter\n                })\n            }\n        }\n    }\n\n    render = () => {\n        return (\n            <div className=\"container\">\n                <div className=\"calc-body\">\n                    <div className=\"calc-screen\">\n                        <div className=\"calc-typed\">\n                            <ValueBlock counter={this.state.counter}/>\n                        </div>\n                    </div>\n                    <div className=\"calc-button-row\">\n                        <OperationBlock ChangeOperationsInput={this.onChangeOperationsInput}/>\n                    </div>\n                    <div className=\"calc-button-row\">\n                        <NumberBlock ChangedInput={this.onChangedNumberInput}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass ValueBlock extends React.Component {\r\n\r\n\r\n\r\n    render = () => {\r\n\r\n\r\n        return (\r\n            <div className=\"inputValue\">\r\n                {this.props.counter}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ValueBlock;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Button from \"./Button\";\r\n\r\nclass OperationBlock extends React.Component {\r\n\r\n\r\n    operation = [\"C\", \"<\", \"/\", \"*\", \"-\", \"+\", \"=\"]\r\n\r\n    render = () => {\r\n        let opertaionElements = this.operation.map(o => <Button buttonname={o}\r\n                                                                ChangeOperationsInput={this.props.ChangeOperationsInput}/>)\r\n\r\n        return (\r\n            <div className=\"calc-button-row\">\r\n                {opertaionElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OperationBlock;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Button from \"./Button\";\r\n\r\nclass Number extends React.Component {\r\n\r\n     SetValue=()=>{\r\n     this.props.ChangedInput(this.props.value)\r\n    }\r\n\r\n\r\n    render = () => {\r\n\r\n\r\n        return (\r\n            <div class=\"button\" onClick={this.SetValue}>\r\n              {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Number;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Button from \"./Button\";\r\nimport Number from \"./Number\";\r\n\r\nclass NumberBlock extends React.Component {\r\n\r\n    number = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, '.']\r\n\r\n    render = () => {\r\n        let numberElements = this.number.map(nb => <Number ChangedInput={this.props.ChangedInput} value={nb}/>)\r\n\r\n        return (\r\n            <div className=\"calc-button-row\">\r\n                {numberElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberBlock;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}